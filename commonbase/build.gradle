apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//for publishing aar using Jfrog Bintray

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.1"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /*buildFeatures{
        dataBinding = true
        viewBinding = true
    }*/

    buildFeatures.dataBinding = true
    buildFeatures.viewBinding = true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    ///implementation project(path: ':codegini')

    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation "com.google.android.material:material:1.2.0"

    def dagger_version = '2.28.1'
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    /*kapt "com.google.dagger:dagger-compiler:$dagger_version"*/
    //kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    ///kapt 'com.google.dagger:dagger-android-processor:[YOUR VERSION NUMBER]'

    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.10'

    api 'io.github.inflationx:calligraphy3:3.1.1'
    api 'io.github.inflationx:viewpump:2.0.3'


    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}

/*
apply from: '/Users/geek/AllaudinProjectz/DoctorAppCHI/app/maven-publish-helper.gradle'

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                ///from components.release // added by Zar E Ahmer
                // Specify own groupId as package name of your library,
                // otherwise it would just use project's name (=name of the root directory) by default.
                groupId 'com.example'

                // Specify custom artifactId if needed,
                // otherwise it would use module's name by default.
                artifactId 'commonbase'

                // You can specify custom version,
                // otherwise it would use version from `android { defaultConfig { ... } }` by default.
                version '1.0.0'
            }
        }
    }
}*/

//region Publish to jCenter
def libGroupId = 'com.chi'
def libArtifactId = 'commonbase'
def libVersion = '1.0.0'
def libDesc = 'This library helps get started MVVM for Activity,Fragment and DialogFragment .'
def libLicenses = ['Apache-2.0']
//fixme update below vscUrl to get it done..
def libVCSUrl = 'git@ssh.dev.azure.com:v3/fnawaz/CHI%20Development/chi-doctor-app-v4-poc'//'https://github.com/lopspower/CircularImageView.git'

// Generate Source Jar
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

// Create the publication with the pom configuration
publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId libGroupId
            artifactId libArtifactId
            version libVersion
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/$libArtifactId-release.aar")
        }
    }
}

// Bintray config
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['MyPublication']
    pkg {
        repo = "maven"
        name = "$libGroupId:$libArtifactId"
        desc = libDesc
        licenses = libLicenses
        vcsUrl = libVCSUrl
        version {
            name = libVersion
            vcsTag = libVersion
            released = new Date()
        }
    }
}
//endregion
